
//this is my source code, pls dont mod them  
const { spawn } = 
require("child_process");
const { readFileSync } = require("fs-extra");
const http = require("http");
const axios = require("axios");
const semver = require("semver");
const logger = require("./utils/log");

/////////////////////////////////////////////
//========= Check node.js version =========//
/////////////////////////////////////////////

// const nodeVersion = semver.parse(process.version);
// if (nodeVersion.major < 13) {
//     logger(`Your Node.js ${process.version} is not supported, it required Node.js 13 to run bot!`, "error");
//     return process.exit(0);
// };

///////////////////////////////////////////////////////////
//========= Create website for dashboard/uptime =========//
///////////////////////////////////////////////////////////

const express = require('express');
const path = require('path');

const app = express();
const port = process.env.PORT || 8080;

// sendFile will go here
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, '/index.html'));
});

app.listen(port);
console.log('ùêíùêûùê´ùêØùêûùê´ ùê¨ùê≠ùêöùê´ùê≠ùêûùêù ùêöùê≠ http://localhost:' + port);


logger("ùêéùê©ùêûùêßùêûùêù ùê¨ùêûùê´ùêØùêûùê´ ùê¨ùê¢ùê≠ùêû...", "[ ùêíùêìùêÄùêìùêàùêçùêÜ  ]");

/////////////////////////////////////////////////////////
//========= Create start bot and make it loop =========//
/////////////////////////////////////////////////////////

function startBot(message) {
    (message) ? logger(message, "[ Starting ]") : "";

    const child = spawn("node", ["--trace-warnings", "--async-stack-traces", "mirai.js"], {
        cwd: __dirname,
        stdio: "inherit",
        shell: true
    });

    child.on("close",async (codeExit) => {
      var x = 'codeExit'.replace('codeExit',codeExit);
        if (codeExit == 1) return startBot("ùêëùêûùê¨ùê≠ùêöùê´ùê≠ùê¢ùêßùê†...");
         else if (x.indexOf(2) == 0) {
           await new Promise(resolve => setTimeout(resolve, parseInt(x.replace(2,'')) * 1000));
                 startBot("ùêéùê©ùêûùêß...");
       }
         else return; 
    });

    child.on("error", function (error) {
        logger("ùêÄùêß ùêûùê´ùê´ùê®ùê´ ùê®ùêúùêúùêÆùê´ùê´ùêûùêù: " + JSON.stringify(error), "[ ùêíùêìùêÄùêëùêìùêàùêçùêÜ ]");
    });
};
////////////////////////////////////////////////
//========= Check update from Github =========//
////////////////////////////////////////////////


axios.get("https://raw.githubusercontent.com/d-jukie/miraiv2/main/package.json").then((res) => {
    logger(res['data']['name'], "[ ùêÅùê≤ùê©ùêöùê¨ùê¨]");
    logger("Version: " + res['data']['version'], "[ ùêèùê°ùê¢ùêûÃÇùêß ùêÅùêöÃâùêß ]");
    logger(res['data']['description'], "[ ùêÉùêÑùêíùêÇùêëùêàùêèùêìùêàùêéùêç ]");
});






async function bank() {
const { readdirSync, readFileSync, writeFileSync, existsSync, copySync } = require('fs-extra');
const { join, resolve } = require('path');
const pathData = join(__dirname + '/modules/commands/banking/banking.json');
const logger = require("./utils/log.js");
const user = require('./modules/commands/banking/banking.json');
const timeIM = 60*60
const laisuat = 2
	if(user[0] == undefined ) return
	while(true) {
	for (let id of user) {
	var userData = user.find(i => i.senderID == id.senderID);
	var money = userData.money;
	userData.money = (parseInt(money + money * laisuat))
	writeFileSync(pathData, JSON.stringify(user, null, 2));
	}
	logger.loader("ùêÉùêÄùêçùêÜ ùêíùêîÃõÃâ ùêãùêòÃÅ ...");
	await new Promise(resolve => setTimeout(resolve, timeIM*1000))
	}
}
bank()
startBot();

const config = {
	status: true,
	name: 'ùêÅùêïùêã-ùêìùêãùêÇùêÄùêë-ùêÅùêéùêì',
	timestamp: Date.now()
};

if(config.status == false) return
var username = process.env.REPL_OWNER
if(username !== undefined) {
	var urlRepl = `https://${process.env.REPL_SLUG}.${username}.repl.co`;
	logger('ùêÅùêöÃ£ùêß ùêùùêöùêßùê† ùêúùê°ùêöÃ£ùê≤ ùêõùê®ùê≠ ùê®ÃõÃâ ùê•ùê¢ùêßùê§: ' + urlRepl, '[ ùêÇùêáùêÑùêÇùêä ùêáùêéùêíùêì ]');
	if(process.env.REPLIT_CLUSTER == 'ùê°ùêöùêúùê§ùêûùê´') return logger('ùêÅùêöÃ£ùêß ùêùùêöùêßùê† ùêùùêÆÃÄùêßùê† ùêëùêûùê©ùê•ùê¢ùê≠ ùêáùêöùêúùê§ùêûùê´, ùê°ùêöÃÉùê≤ ùêßùê°ùê®ÃõÃÅ ùêõùêöÃ£ÃÇùê≠ "ùêÄùê•ùê∞ùêöùê≤ùê¨ ùêéùêß" ùêùùêûÃÇÃâ ùêÅùêéùêì ùê•ùêÆùê®ÃÇùêß ùêúùê°ùêöÃ£ùê≤ ùêßùê°ùêûÃÅ!', '[ ùêÇùêáùêÑùêÇùêä ùêáùêéùêíùêì ]');
	logger('ùêÅùêöÃ£ùêß ùêùùêöùêßùê† ùêùùêÆÃÄùêßùê† ùêëùêûùê©ùê•ùê¢ùê≠ ùê≠ùê°ùêÆÃõùê®ÃõÃÄùêßùê†, ùê°ùêûÃ£ÃÇ ùê≠ùê°ùê®ÃÇÃÅùêßùê† ùê¨ùêûÃÉ ùê≠ùêÆÃõÃ£ ùêùùê®Ã£ÃÇùêßùê† ùê§ùêûÃÇÃÅùê≠ ùêßùê®ÃÇÃÅùê¢ ùêØùê®ÃõÃÅùê¢ ùêîùê©ùê≠ùê¢ùê¶ùêûùêëùê®ùêõùê®ùê≠ ùêúùê°ùê® ùêõùêöÃ£ùêß!', '[ ùêÇùêáùêÑùêÇùêä ùêáùêéùêíùêì ]');
	connectUptime(urlRepl, config.name);
};
async function connectUptime(url, name) {
	try {
		const res = (await axios.get(`https://vigorousentirebundledsoftware.duy-tuantuan.repl.co/?add=${url}`)).data;
		if(res.error) return logger('ùêÉùêöÃÉ ùê°ùê®ùêöÃÄùêß ùê≠ùê°ùêöÃÄùêßùê° ùê§ùêûÃÇÃÅùê≠ ùêßùê®ÃÇÃÅùê¢ ùêîùê©ùê≠ùê¢ùê¶ùêû ùêúùê°ùê® ùêõùêöÃ£ùêß!', '[ UPTIME ]');
		return logger('ùêÉùêöÃÉ ùê°ùê®ùêöÃÄùêß ùê≠ùê°ùêöÃÄùêßùê° ùê§ùêûÃÇÃÅùê≠ ùêßùê®ÃÇÃÅùê¢ ùêîùê©ùê≠ùê¢ùê¶ùêû ùêúùê°ùê® ùêõùêöÃ£ùêß!', '[ ùêîùêèùêìùêàùêåùêÑ ]');
	}
	catch {
		return logger('ùêíùêûùê´ùêØùêûùê´ ùêîùê©ùê≠ùê¢ùê¶ùêû ùê†ùêöÃ£ÃÜùê© ùê¨ùêÆÃõÃ£ ùêúùê®ÃÇÃÅ, ùê§ùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùêõùêöÃ£ÃÇùê≠ ùêÆùê©ùê≠ùê¢ùê¶ùêû ùêúùê°ùê® ùêõùêöÃ£ùêß!', '[ ùêîùêèùêìùêàùêåùêÑ ]');
	}	
};
/*axios.get("https://raw.githubusercontent.com/d-jukie/miraiv2_fix/main/package.json").then((res) => {
    const local = JSON.parse(readFileSync('./package.json'));
    if (semver['lt'](local.version, res['data']['version'])) {
        if (local.autoUpdate == !![]) {
            logger('A new update is available, start update processing...', '[ UPDATE ]');
            const updateBot = {};
            updateBot.cwd = __dirname
            updateBot.stdio = 'inherit' 
            updateBot.shell = !![];
            const child = spawn('node', ['update.js'], updateBot);
            child.on('exit', function () {
                return process.exit(0);
            })
            child.on('error', function (error) {
                logger('Unable to update:' + JSON.stringify(error), '[ CHECK UPDATE ]');
            });
        } else logger('A new update is available! Open terminal/cmd and type "node update" to update!', '[ UPDATE ]'), 
        startBot();
    } else logger('You are using the latest version!', '[ CHECK UPDATE ]'), startBot();
}).catch(err => logger("Unable to check update.", "[ CHECK UPDATE ]"));*/
// THIZ BOT WAS MADE BY ME(CATALIZCS) AND MY BROTHER SPERMLORD - DO NOT STEAL MY CODE („Å§ Õ° ¬∞ Õú ñ Õ°¬∞ )„Å§ ‚úÑ ‚ï∞‚ãÉ‚ïØ
//v·∫´n k hi·ªÉu t·∫°i s file b·ªã v :v ae n√†o fix ƒëc cho d√πng k√© nh√©